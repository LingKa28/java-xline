/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
	// Apply the java-library plugin for API and implementation separation.
	id 'java-library'

	id 'com.diffplug.spotless' version '6.22.0'

	id "net.ltgt.errorprone" version "3.1.0"

	id "com.google.protobuf" version "0.9.4"
}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	// This dependency is exported to consumers, that is to say found on their compile classpath.
	api 'org.apache.commons:commons-math3:3.6.1'

	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
	implementation 'com.google.guava:guava:32.1.1-jre'

	errorprone "com.google.errorprone:error_prone_core:latest.release"

	implementation 'com.google.protobuf:protobuf-java:3.6.1'
}

testing {
	suites {
		// Configure the built-in test suite
		test {
			// Use JUnit4 test framework
			useJUnit('4.13.2')
		}
	}
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.18.1').aosp().reflowLongStrings().skipJavadocFormatting()
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}

protobuf {
		protoc {
			// The artifact spec for the Protobuf Compiler
			artifact = 'com.google.protobuf:protoc:3.21.12'
		}
		plugins {
			// Optional: an artifact spec for a protoc plugin, with "grpc" as
			// the identifier, which can be referred to in the "plugins"
			// container of the "generateProtoTasks" closure.
			grpc {
				artifact = 'io.grpc:protoc-gen-grpc-java:1.58.0'
			}
		}
		generateProtoTasks {
			ofSourceSet('main').configureEach {
				plugins {
					// Apply the "grpc" plugin whose spec is defined above, without
					// options.  Note the braces cannot be omitted, otherwise the
					// plugin will not be added. This is because of the implicit way
					// NamedDomainObjectContainer binds the methods.
					grpc { }
				}
			}
		}
	}

sourceSets {
	main {
		proto {
			// In addition to the default 'src/main/proto'
			srcDir 'src/curp-proto/src'
			// srcDir 'src/main/protocolbuffers'
			// In addition to the default '**/*.proto' (use with caution).
			// Using an extension other than 'proto' is NOT recommended,
			// because when proto files are published along with class files, we can
			// only tell the type of a file from its extension.
			// include '**/*.protodevel'
		}
		java {}
	}
	test {
		proto {
			// In addition to the default 'src/test/proto'
			// srcDir 'src/test/protocolbuffers'
		}
	}
}
